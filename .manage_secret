#!/usr/bin/env bash

function usage() {
  echo "Usage: $SCRIPT secret [-h|--help] [{-a|--add|-r|--remove} {files...} | {-R|--reveal} | {-H|--hide}]"
  # if $1 is non empty, print long usage
  if [ -z "$1" ]; then return; fi
  echo "Manage the secrets in the repository."
  echo ""
  echo "Options:"
  echo "    -a, --add           Add files to secrets"
  echo "    -r, --remove        Remove files from secrets"
  echo "    -r, --reveal        Decrypt secrets"
  echo "    -h, --hide          Encrypt secrets"
  echo "    -Q, --super-quiet   Suppress almost all output"
  echo "    -q, --quiet         Suppress most output"
  echo "    -v, --verbose       Enable verbose output"
  echo "    -h, --help          Display this message"
}

function run() {
  # parse arguments
  local action="a"
  local verbose=""
  local -a configs
  while [ -n "$1" ]; do
    case "$1" in
      -h | --help)
        usage long
        return;;
      -a | --add)
        action="a"
        shift;;
      -r | --remove)
        action="r"
        shift;;
      -R | --reveal)
        action="R"
        shift;;
      -H | --hide)
        action="H"
        shift;;
      -q | --quiet | -Q | --super-quiet | -v | --verbose)
        verbose="$1"
        shift;;
      --* )
        echo "$SCRIPT: invalid option: ${1:2}" >&2
        usage
        return 1;;
      -* )
        echo "$SCRIPT: invalid option: ${1:1}" >&2
        usage
        return 1;;
      * )
        configs+=("$1")
        shift;;
    esac
  done

  # ensure configs are given
  if [[ ("$action" == "a" || "$action" == "r") &&  ${#configs[@]} == 0 ]]; then
    usage long
    return 1
  fi

  # perform the actions
  case "$action" in
    r|a)
      for config in "${configs[@]}"; do
        if [[ "$action" == "a" ]]; then
          add_to_secrets "$config"
        else
          remove_from_secrets "$config"
        fi
      done;;
    R)
      decrypt_secrets;;
    H)
      encrypt_secrets;;
  esac
}

